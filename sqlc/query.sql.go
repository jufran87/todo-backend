// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const callcreate_task_prc = `-- name: Callcreate_task_prc :exec

CALL todo.create_task_prc($1)
`

// query.sql
func (q *Queries) Callcreate_task_prc(ctx context.Context, createTaskPrc interface{}) error {
	_, err := q.db.Exec(ctx, callcreate_task_prc, createTaskPrc)
	return err
}

const calldelete_task_prc = `-- name: Calldelete_task_prc :exec
CALL todo.delete_task_prc($1)
`

func (q *Queries) Calldelete_task_prc(ctx context.Context, deleteTaskPrc interface{}) error {
	_, err := q.db.Exec(ctx, calldelete_task_prc, deleteTaskPrc)
	return err
}

const callupdate_task_prc = `-- name: Callupdate_task_prc :exec
CALL todo.update_task_prc($1, $2, $3)
`

type Callupdate_task_prcParams struct {
	UpdateTaskPrc   interface{}
	UpdateTaskPrc_2 interface{}
	UpdateTaskPrc_3 interface{}
}

func (q *Queries) Callupdate_task_prc(ctx context.Context, arg Callupdate_task_prcParams) error {
	_, err := q.db.Exec(ctx, callupdate_task_prc, arg.UpdateTaskPrc, arg.UpdateTaskPrc_2, arg.UpdateTaskPrc_3)
	return err
}

const getTask = `-- name: GetTask :one
SELECT task_id, description, state_id, created_at, updated_at, deleted_at FROM todo.tasks WHERE task_id = $1 and state_id != 6 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID int16) (TodoTask, error) {
	row := q.db.QueryRow(ctx, getTask, taskID)
	var i TodoTask
	err := row.Scan(
		&i.TaskID,
		&i.Description,
		&i.StateID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllTasks = `-- name: ListAllTasks :many
SELECT task_id, description, state_id, created_at, updated_at, deleted_at FROM todo.tasks where state_id != 6 ORDER BY created_at DESC
`

func (q *Queries) ListAllTasks(ctx context.Context) ([]TodoTask, error) {
	rows, err := q.db.Query(ctx, listAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTask
	for rows.Next() {
		var i TodoTask
		if err := rows.Scan(
			&i.TaskID,
			&i.Description,
			&i.StateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClosedTask = `-- name: ListClosedTask :many
SELECT task_id, description, state_id, created_at, updated_at, deleted_at FROM todo.tasks where state_id = 5 ORDER BY created_at DESC
`

func (q *Queries) ListClosedTask(ctx context.Context) ([]TodoTask, error) {
	rows, err := q.db.Query(ctx, listClosedTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTask
	for rows.Next() {
		var i TodoTask
		if err := rows.Scan(
			&i.TaskID,
			&i.Description,
			&i.StateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLastTasks = `-- name: ListLastTasks :many
SELECT a.task_id, a.description, a.state_id, a.created_at, a.updated_at, a.deleted_at FROM (SELECT ord.task_id, ord.description, ord.state_id, ord.created_at, ord.updated_at, ord.deleted_at FROM todo.tasks ord where ord.state_id != 6 ORDER BY ord.created_at DESC) a LIMIT 10
`

func (q *Queries) ListLastTasks(ctx context.Context) ([]TodoTask, error) {
	rows, err := q.db.Query(ctx, listLastTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTask
	for rows.Next() {
		var i TodoTask
		if err := rows.Scan(
			&i.TaskID,
			&i.Description,
			&i.StateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOpenTask = `-- name: ListOpenTask :many
SELECT task_id, description, state_id, created_at, updated_at, deleted_at FROM todo.tasks where state_id = 3 ORDER BY created_at DESC
`

func (q *Queries) ListOpenTask(ctx context.Context) ([]TodoTask, error) {
	rows, err := q.db.Query(ctx, listOpenTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTask
	for rows.Next() {
		var i TodoTask
		if err := rows.Scan(
			&i.TaskID,
			&i.Description,
			&i.StateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
